const readlinePromises = require("node:readline");
const fs = require('node:fs');

const rl = readlinePromises.createInterface({ input: process.stdin, output: process.stdout });

async function logging(data) {
    fs.appendFile("logging.txt", data, (err) => {
        if (err) {
            console.log(err);
        }
    });
}

async function ask(question) {
    const answer = await new Promise((resolve) => { rl.question(question, resolve); });
    if (answer === "q") {
        rl.close();
        return false;
    }
    return answer;
}

async function startGame() {
    const answer = await ask("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (q - –≤—ã—Ö–æ–¥): ");
    if (answer === false) {
        return false;
    }
    if (answer) {
        const numberOfTry = Number(answer);
        if (!Number.isNaN(numberOfTry)) {
            const randomNum = Math.floor(Math.random() * 1000);
            return { secretNum: randomNum, tryNum: numberOfTry };
        }
    }
    console.log("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —á–∏—Å–ª–æ");
    try {
        return await startGame();
    } catch (err) {
        console.log(err);
    }
}

async function guessNum(secretNum, tryNum, counter = 1) {
    const answer = await ask(`–£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ (–æ—Ç 1 –¥–æ 1000, q - –≤—ã—Ö–æ–¥), [${counter}/${tryNum}]: `);
    if (answer === false) {
        return;
    }
    await logging(`–û—Ç–≤–µ—Ç[${secretNum}] ‚Üí –≤–µ–¥–µ–Ω–æ: ${answer} ‚Üí —Å—Ç–∞—Ç–∞:  [${counter}/${tryNum}]\n`);
    const guessedNum = Number(answer);
    if (Number.isNaN(guessedNum)) {
        console.log("‚ûñ –º–∏–Ω—É—Å –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ");
    } else if (guessedNum > 1000 || guessedNum < 1) {
        console.log("‚ûñ –º–∏–Ω—É—Å –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞, –≤–µ–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [1, 1000]");
    } else if (guessedNum > secretNum) {
        console.log("üîΩ –£–ø—Å, –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ");
    } else if (guessedNum < secretNum) {
        console.log("üîº –£–ø—Å, –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ");
    } else if (guessedNum === secretNum) {
        console.log(`üéâ –ü–æ–±–µ–¥–∞, –≤—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å ${counter} –ø–æ–ø—ã—Ç–æ–∫, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –±—ã–ª–æ ${counter + tryNum - 1}, —É–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ ${secretNum}`);
        rl.close();
        return;
    }
    if (tryNum === 1) {
        console.log(`üò¢ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: ${counter}`);
        rl.close();
        return;
    }
    await guessNum(secretNum, tryNum - 1, counter + 1);
}

async function main() {
    console.log("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ' üéÆ");
    const value = await startGame();
    if (value) {
        await guessNum(value.secretNum, value.tryNum);
    }
}

main().then();
